use ffi::constants as ffi;

#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum OpenMode {
    UNQLITE_OPEN_READONLY,
    UNQLITE_OPEN_READWRITE,
    UNQLITE_OPEN_CREATE,
    UNQLITE_OPEN_EXCLUSIVE,
    UNQLITE_OPEN_TEMP_DB,
    UNQLITE_OPEN_NOMUTEX,
    UNQLITE_OPEN_OMIT_JOURNALING,
    UNQLITE_OPEN_IN_MEMORY,
    UNQLITE_OPEN_MMAP,
}

pub use self::OpenMode::*;

impl OpenMode {
    fn to_u32(&self) -> u32 {
        match *self {
            UNQLITE_OPEN_READONLY => ffi::UNQLITE_OPEN_READONLY,
            UNQLITE_OPEN_READWRITE => ffi::UNQLITE_OPEN_READWRITE,
            UNQLITE_OPEN_CREATE => ffi::UNQLITE_OPEN_CREATE,
            UNQLITE_OPEN_EXCLUSIVE => ffi::UNQLITE_OPEN_EXCLUSIVE,
            UNQLITE_OPEN_TEMP_DB => ffi::UNQLITE_OPEN_TEMP_DB,
            UNQLITE_OPEN_NOMUTEX => ffi::UNQLITE_OPEN_NOMUTEX,
            UNQLITE_OPEN_OMIT_JOURNALING => ffi::UNQLITE_OPEN_OMIT_JOURNALING,
            UNQLITE_OPEN_IN_MEMORY => ffi::UNQLITE_OPEN_IN_MEMORY,
            UNQLITE_OPEN_MMAP => ffi::UNQLITE_OPEN_MMAP | ffi::UNQLITE_OPEN_READONLY,
        }
    }
}

impl Into<u32> for OpenMode {
    fn into(self) -> u32 {
        match self {
            UNQLITE_OPEN_READONLY => ffi::UNQLITE_OPEN_READONLY,
            UNQLITE_OPEN_READWRITE => ffi::UNQLITE_OPEN_READWRITE,
            UNQLITE_OPEN_CREATE => ffi::UNQLITE_OPEN_CREATE,
            UNQLITE_OPEN_EXCLUSIVE => ffi::UNQLITE_OPEN_EXCLUSIVE,
            UNQLITE_OPEN_TEMP_DB => ffi::UNQLITE_OPEN_TEMP_DB,
            UNQLITE_OPEN_NOMUTEX => ffi::UNQLITE_OPEN_NOMUTEX,
            UNQLITE_OPEN_OMIT_JOURNALING => ffi::UNQLITE_OPEN_OMIT_JOURNALING,
            UNQLITE_OPEN_IN_MEMORY => ffi::UNQLITE_OPEN_IN_MEMORY,
            UNQLITE_OPEN_MMAP => ffi::UNQLITE_OPEN_MMAP | ffi::UNQLITE_OPEN_READONLY,
        }
    }
}
